
x-airflow-common: &airflow-common
  build:
    context: ./airflow_dockerfile
    dockerfile: Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW__CORE__FERNET_KEY}
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
    PYTHONPATH: /opt/airflow
  env_file:
    - .env
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ./config:/opt/airflow/config
    - ./spark_jars:/opt/spark/spark_jars
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on: 
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy
  networks:
    - all_in_one

services:

  # postgres:
  #   image: postgres:15.2
  #   environment:
  #     POSTGRES_USER: airflow
  #     POSTGRES_PASSWORD: airflow
  #     POSTGRES_DB: airflow
  #   volumes:
  #     - ./postgres-db-volume:/var/lib/postgresql/data
  #   healthcheck:
  #     test: ["CMD", "pg_isready", "-U", "airflow"]
  #     interval: 10s
  #     retries: 5
  #     start_period: 5s
  #   restart: always
  #   networks:
  #     - all_in_one

  # redis:
  #   restart: always
  #   image: redis:7.2-bookworm
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 10s
  #     timeout: 30s
  #   networks:
  #     - all_in_one

  # airflow-webserver:
  #   <<: *airflow-common
  #   command: webserver
  #   restart: always
  #   ports:
  #     - "8080:8080"
  #   entrypoint: >
  #     bash -c "
  #       rm -f /opt/airflow/airflow-webserver.pid &&
  #       exec airflow webserver
  #     "
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
  #     interval: 30s
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-scheduler:
  #   <<: *airflow-common
  #   command: scheduler
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-worker:
  #   <<: *airflow-common
  #   command: celery worker
  #   healthcheck:
  #     test:
  #       - "CMD-SHELL"
  #       - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   environment:
  #     <<: *airflow-common-env
  #     DUMB_INIT_SETSID: "0"
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-triggerer:
  #   <<: *airflow-common
  #   command: triggerer
  #   healthcheck:
  #     test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  # airflow-init:
  #   <<: *airflow-common
  #   entrypoint: /bin/bash
  #   command:
  #     - -c
  #     - |
  #       if [[ -z "${AIRFLOW_UID}" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
  #         echo "If you are on Linux, you SHOULD follow the instructions below to set "
  #         echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
  #         echo "For other operating systems you can get rid of the warning with manually created .env file:"
  #         echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
  #         echo
  #       fi
  #       one_meg=1048576
  #       mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
  #       cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
  #       disk_available=$$(df / | tail -1 | awk '{print $$4}')
  #       warning_resources="false"
  #       if (( mem_available < 4000 )) ; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
  #         echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( cpus_available < 2 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
  #         echo "At least 2 CPUs recommended. You have $${cpus_available}"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if (( disk_available < one_meg * 10 )); then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
  #         echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
  #         echo
  #         warning_resources="true"
  #       fi
  #       if [[ $${warning_resources} == "true" ]]; then
  #         echo
  #         echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
  #         echo "Please follow the instructions to increase amount of resources available:"
  #         echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
  #         echo
  #       fi
  #       mkdir -p /sources/logs /sources/dags /sources/plugins
  #       chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
  #       exec /entrypoint airflow version
  #   environment:
  #     <<: *airflow-common-env
  #     _AIRFLOW_DB_MIGRATE: 'true'
  #     _AIRFLOW_WWW_USER_CREATE: 'true'
  #     _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
  #     _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
  #     _PIP_ADDITIONAL_REQUIREMENTS: ''
  #   user: "0:0"
  #   volumes:
  #     - ${AIRFLOW_PROJ_DIR:-.}:/sources
  
  # airflow-cli:
  #   <<: *airflow-common
  #   profiles:
  #     - debug
  #   environment:
  #     <<: *airflow-common-env
  #     CONNECTION_CHECK_MAX_COUNT: "0"
  #   command:
  #     - bash
  #     - -c
  #     - airflow

  # flower:
  #   <<: *airflow-common
  #   command: celery flower
  #   profiles:
  #     - flower
  #   ports:
  #     - "5555:5555"
  #   healthcheck:
  #     test: ["CMD", "curl", "--fail", "http://localhost:5555/"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 5
  #     start_period: 30s
  #   restart: always
  #   depends_on:
  #     <<: *airflow-common-depends-on
  #     airflow-init:
  #       condition: service_completed_successfully

  minio:
    restart: always
    image: minio/minio:latest
    env_file: .env
    volumes:
      - ./minio_storage:/data
    ports:
      - 9000:9000
      - 9001:9001
    command: server --console-address ":9001" /data
    networks:
      - all_in_one

  # spark-master:
  #   image: bitnami/spark:3.5
  #   restart: always
  #   container_name: spark-master
  #   environment:
  #     - SPARK_MODE=master
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #   volumes:
  #     - ./spark_jars:/opt/spark/spark_jars
  #   ports:
  #     - 7077:7077
  #     - 8085:8080
  #   networks:
  #     - all_in_one

  # spark-worker-1:
  #   image: bitnami/spark:3.5
  #   restart: always
  #   container_name: spark-worker-1
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=${SPARK_WORKER_MEMORY}
  #     - SPARK_WORKER_CORES=${SPARK_WORKER_CORES}
  #     - SPARK_USER=spark
  #   volumes:
  #     - ./spark_jars:/opt/spark/spark_jars
  #   depends_on:
  #     - spark-master
  #   ports:
  #     - 8081:8081
  #   networks:
  #     - all_in_one
  
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "srvr", "|", "nc", "zookeeper", "2181"]
      interval: 10s
      start_period: 10s
      retries: 20
    networks:
      - all_in_one

  broker:
    image: confluentinc/cp-kafka:7.4.0
    container_name: broker
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: |
        PLAINTEXT://broker:29092,\
        PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "9092"]
      interval: 5s
      start_period: 15s
      timeout: 10s
      retries: 10
    networks:
      - all_in_one

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    networks:
      - all_in_one
    
  weather-producer:
    build: ./kafka_producer
    restart: always
    env_file:
      - .env
    volumes:
      - ./kafka_producer/weather_producer.py:/app/weather_producer.py
      - ./config.py:/app/config.py
      - ./utils:/app/utils
      - ./clients:/app/clients
    command: ["python", "weather_producer.py"]
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      broker:
        condition: service_healthy
    networks:
      - all_in_one
  
  greenplum:
    image: andruche/greenplum:6.25.3
    container_name: greenplum
    ports:
      - "5432:5432"
    restart: always
    volumes:
      - ./greenplum_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${GP_USER}
      - POSTGRES_PASSWORD=${GP_PASSWORD}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-db-volume:
  greenplum_data:

networks:
    all_in_one: